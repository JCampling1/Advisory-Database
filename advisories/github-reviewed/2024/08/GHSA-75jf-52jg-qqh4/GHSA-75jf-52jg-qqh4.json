{
  "schema_version": "1.4.0",
  "id": "GHSA-75jf-52jg-qqh4",
  "modified": "2024-08-16T19:27:56Z",
  "published": "2024-08-15T18:31:52Z",
  "aliases": [
    "CVE-2024-32231"
  ],
  "summary": "SQL injection in github.com/stashapp/stash",
  "details": "To address the SQL injection vulnerability identified in the `stashapp/stash` package, where versions prior to 0.26.0 are vulnerable due to the `sort` parameter being improperly sanitized, here are the steps and recommendations for improvement:\n\n### 1. **Upgrade the Package**\n   - **Primary Recommendation**: Upgrade the `stashapp/stash` package to version 0.26.0 or later. This version includes the necessary patches to address the SQL injection vulnerability.\n   \n   ```bash\n   go get github.com/stashapp/stash@v0.26.0\n   ```\n\n### 2. **Review and Refactor Code Handling the `sort` Parameter**\n   - **Sanitize Inputs**: Ensure that all user inputs, especially those used in SQL queries (like the `sort` parameter), are properly sanitized. Use parameterized queries to prevent SQL injection.\n   \n   ```go\n   db.Query(\"SELECT * FROM items ORDER BY ?\", sanitizedSortParam)\n   ```\n\n   - **Avoid Direct String Interpolation**: Avoid directly interpolating user inputs into SQL queries. Instead, use prepared statements or ORM methods that support parameterized queries.\n\n### 3. **Implement Additional Input Validation**\n   - **Strict Input Validation**: Implement strict validation on the `sort` parameter to ensure it only allows expected values (e.g., specific column names).\n   - **Whitelist Valid Inputs**: Consider creating a whitelist of valid `sort` parameters and reject any input that does not match this list.\n   \n   ```go\n   validSortColumns := map[string]bool{\"name\": true, \"date\": true, \"id\": true}\n   if !validSortColumns[userSortInput] {\n       return errors.New(\"Invalid sort parameter\")\n   }\n   ```\n\n### 4. **Regularly Audit and Test SQL Queries**\n   - **Automated Testing**: Implement automated tests to validate that all SQL queries in your application are secure. This should include testing against SQL injection attacks.\n   - **Static Analysis Tools**: Use static analysis tools to scan your Go code for vulnerabilities, including SQL injection risks.\n\n### 5. **Improve Logging and Monitoring**\n   - **Log Suspicious Activities**: Implement logging to detect and log any suspicious activities related to SQL queries, such as unusual sorting parameters or failed injection attempts.\n   - **Monitor Database Access**: Set up monitoring on your database to detect and alert on any unusual or potentially malicious queries.\n\n### 6. **Educate Developers on Secure Coding Practices**\n   - **Developer Training**: Provide training to your development team on secure coding practices, particularly around SQL injection and other common vulnerabilities.\n   - **Code Reviews**: Regularly conduct code reviews with a focus on security to ensure best practices are being followed.\n\n### 7. **Consider Using an ORM**\n   - **ORM for Safety**: Consider using an Object-Relational Mapping (ORM) library that abstracts and safeguards SQL queries, reducing the risk of SQL injection. Libraries like `GORM` or `Ent` in Go can help enforce safer query practices.\n\n### 8. **Document the Change and Communicate to Stakeholders**\n   - **Documentation**: Update your project documentation to reflect the changes made to address the vulnerability. This includes notes on the version upgrade and changes to input handling.\n   - **Communicate with Users**: Notify users of the vulnerability and the importance of upgrading to the latest patched version.\n\n### 9. **Continuous Security Practices**\n   - **Security Audits**: Regularly audit your application and dependencies for security vulnerabilities.\n   - **Keep Dependencies Updated**: Stay on top of updates and security patches for all your dependencies, not just `stashapp/stash`.\n\nBy following these steps, you can mitigate the SQL injection vulnerability in the `stashapp/stash` package, improve overall application security, and protect against potential future vulnerabilities.",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H"
    }
  ],
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/stashapp/stash"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.26.0"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-32231"
    },
    {
      "type": "WEB",
      "url": "https://github.com/stashapp/stash/pull/4865"
    },
    {
      "type": "WEB",
      "url": "https://github.com/stashapp/stash/commit/89553864f5fa92beaa37a12e489064b1358d9880"
    },
    {
      "type": "WEB",
      "url": "https://pkg.go.dev/vuln/GO-2024-3070"
    },
    {
      "type": "PACKAGE",
      "url": "github.com/stashapp/stash"
    }
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-89"
    ],
    "severity": "HIGH",
    "github_reviewed": true,
    "github_reviewed_at": "2024-08-16T19:27:53Z",
    "nvd_published_at": "2024-08-15T18:15:19Z"
  }
}