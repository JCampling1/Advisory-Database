{
  "schema_version": "1.2.0",
  "id": "GHSA-9j8q-m9x5-9g6j",
  "modified": "2021-08-24T18:52:16Z",
  "published": "2021-08-25T20:59:11Z",
  "aliases": [
    "CVE-2020-36444"
  ],
  "summary": "Data races in async-coap",
  "details": "An issue was discovered in the async-coap crate through 2020-12-08 for Rust. \nAffected versions of this crate implement Send/Sync for `ArcGuard<RC, T>` with no trait bounds on `RC`. This allows users to send `RC: !Send` to other threads and also allows users to concurrently access `Rc: !Sync` from multiple threads.\n\nThis can result in memory corruption from data race or other undefined behavior caused by sending `T: !Send` to other threads (e.g. dropping `MutexGuard<T>` in another thread that didn't lock its mutex).\n",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  ],
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "async-coap"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "0"
            }
          ]
        }
      ],
      "database_specific": {
        "last_known_affected_version_range": "<= 0.1.0"
      }
    }
  ],
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-36444"
    },
    {
      "type": "WEB",
      "url": "https://github.com/google/rust-async-coap/issues/33"
    },
    {
      "type": "WEB",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0124.html"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/google/rust-async-coap"
    }
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-119",
      "CWE-362"
    ],
    "severity": "HIGH",
    "github_reviewed": true
  }
}